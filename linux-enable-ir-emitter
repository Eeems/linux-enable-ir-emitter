#!/bin/bash

BASE_PATH=/usr/lib/linux-enable-ir-emitter/
PYTHON_FIND_CONFIG_PATH="${BASE_PATH}find-config-ir-emitter.py"
CONFIG_FILE="${BASE_PATH}config.yaml"
BIN_ENABLE_IR_PATH="${BASE_PATH}enable-ir-emitter"


function find_configuration() {
    echo $(python $PYTHON_FIND_CONFIG_PATH $CONFIG_FILE)
}

# take in argument the config 
function run_configuration() {
    $BIN_ENABLE_IR_PATH $@
}

function find_and_run() {
    local config=$(find_configuration)
    ([[ "$config" == *"-"* ]] && run_configuration "$config") || (echo "$config" && return 1)
}

function show_help() {
    columnPrint="%-20s%-s\n"
    printf "usage: linux-enable-ir-emitter [-f | -r <config> | -rf | -s <enable|disable> | -h]\n\n"

    printf "Parameters:\n"
    printf "$columnPrint" "-f, --find" "search a configuration for the ir emitter, return <config> if success"
    printf "$columnPrint" "-r, --run" "takes as argument <config> returned by 'linux-enable-ir-emitter -f'"
    printf "$columnPrint" "-rf" "redirects output from -f to -r"
    printf "$columnPrint" "-h, --help" "shows this help"

    printf "\n"
    printf "Arguments:\n"
    printf "$columnPrint" "<config>" "-dataSize <integer> -data <integer integer ...(dataSize elements)> -unit <integer> -selector <integer>"
    printf "$columnPrint" "<enable|disable>" "enable or disable the systemd service"
}

case "$1" in
-f | --find)
    find_configuration
    ;;
-r | --run)
    shift 1
    run_configuration $@
    ;;
-rf)
    find_and_run
    ;;
-h | --help)
    show_help
    ;;
*)
    echo "Bad use, -h to diplay help." >&2
    exit 1
    ;;
esac
